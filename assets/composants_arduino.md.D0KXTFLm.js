import{_ as l,E as n,c as t,m as s,a as i,J as r,a4 as a,o}from"./chunks/framework.CRhGRqNS.js";const f=JSON.parse('{"title":"Arduino","description":"","frontmatter":{},"headers":[],"relativePath":"composants/arduino.md","filePath":"composants/arduino.md"}'),p={name:"composants/arduino.md"},h=a('<h1 id="arduino" tabindex="-1">Arduino <a class="header-anchor" href="#arduino" aria-label="Permalink to &quot;Arduino&quot;">​</a></h1><p><img src="https://img.shields.io/badge/Arduino%20Mega-%2300878F?style=for-the-badge&amp;logo=arduino&amp;logoColor=fff&amp;logoSize=fff" alt="Arduino Mega"></p><p>La arduino mega 2560 est une carte qui servira de controleur.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Pour faire la communication entre le HMI et l&#39;arduino on utilise une <a href="/bras/composants/4069.html">porte logique 4069</a></p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Lors du démarrage d&#39;une arduino ou d&#39;un reset il y&#39;a un léger délai ou l&#39;arduino va lancer le programme puis se relancer. Il est donc conseillé d&#39;y mettre au début du programme dans le setup un délai compris entre 100 et 300ms (selon la carte). Dans le code de la carte il est situé dans la fonction <a href="/bras/functions/configset.html">configset()</a></p></div>',5),d={id:"description",tabindex:"-1"},k=s("a",{class:"header-anchor",href:"#description","aria-label":'Permalink to "Description <Badge type="info" text="Extrait" />"'},"​",-1),c=a(`<ul><li>ATmega2560 Processor <ul><li>Up to 16 MIPS Throughput at 16MHz</li><li>256k bytes (of which 8k is used for the bootloader)</li><li>4k bytes EEPROM</li><li>8k bytes Internal SRAM</li><li>32 × 8 General Purpose Working Registers</li><li>Real Time Counter with Separate Oscillator</li><li>Four 8-bit PWM Channels</li><li>Four Programmable Serial USART</li><li>Controller/Peripheral SPI Serial Interface</li></ul></li><li>ATmega16U2 <ul><li>Up to 16 MIPS Throughput at 16 MHz</li><li>16k bytes ISP Flash Memory</li><li>512 bytes EEPROM</li><li>512 bytes SRAM</li><li>USART with SPI master only mode and hardware flow control (RTS/CTS)</li><li>Master/Slave SPI Serial Interface</li></ul></li><li>Sleep Modes <ul><li>Idle</li><li>ADC Noise Reduction</li><li>Power-save</li><li>Power-down</li><li>Standby</li><li>Extended Standby</li></ul></li><li>Power <ul><li>USB Connection</li><li>External AC/DC Adapter</li></ul></li><li>I/O <ul><li>54 Digital</li><li>16 Analog</li><li>15 PWM Output</li></ul></li></ul><h2 id="image" tabindex="-1">Image <a class="header-anchor" href="#image" aria-label="Permalink to &quot;Image&quot;">​</a></h2><p><img src="https://raw.githubusercontent.com/kerogs/bras/refs/heads/main/assets/arduino-mega.png" alt="Arduion image"></p><h2 id="oscilloscope" tabindex="-1">Oscilloscope <a class="header-anchor" href="#oscilloscope" aria-label="Permalink to &quot;Oscilloscope&quot;">​</a></h2><h3 id="trame-rx" tabindex="-1">Trame (RX) <a class="header-anchor" href="#trame-rx" aria-label="Permalink to &quot;Trame (RX)&quot;">​</a></h3><p><img src="https://raw.githubusercontent.com/kerogs/bras/refs/heads/main/assets/oscillo_trame_arduino_hex.png" alt="Trame RX arduino"></p><h3 id="trame-hmi-led-arduino" tabindex="-1">Trame HMI + LED arduino <a class="header-anchor" href="#trame-hmi-led-arduino" aria-label="Permalink to &quot;Trame HMI + LED arduino&quot;">​</a></h3><p>Led qui s&#39;allume au passage d&#39;une trame envoyé par le HMI</p><details class="details custom-block"><summary>Code</summary><p>Morceau de code utilisé dans la version <code>v1.1.26-alpha</code></p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> led</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Reste du code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // éteint la led à la fin d&#39;une trame</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(led, LOW);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Reste du code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> serialEvent3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Serial3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">available</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Serial3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">available</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            digitalWrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(led, HIGH);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /// Reste du code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /// Reste du code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /// Reste du code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details><p><img src="https://raw.githubusercontent.com/kerogs/bras/refs/heads/main/assets/oscillo_trame_led.png" alt="trame HMI + led arduino"></p><h2 id="lien-utile" tabindex="-1">Lien utile <a class="header-anchor" href="#lien-utile" aria-label="Permalink to &quot;Lien utile&quot;">​</a></h2><ul><li><a href="https://raw.githubusercontent.com/kerogs/bras/refs/heads/main/assets/Arduino-mega-A000067-datasheet.pdf" target="_blank" rel="noreferrer">DATASHEET</a></li></ul>`,12);function u(g,m,E,y,_,b){const e=n("Badge");return o(),t("div",null,[h,s("h2",d,[i("Description "),r(e,{type:"info",text:"Extrait"}),i(),k]),c])}const D=l(p,[["render",u]]);export{f as __pageData,D as default};
